trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-18.04'
  container:
    image: aswftesting/ci-base:2020.1

  steps:
  - script: |
      mkdir build
      cd build
      # ASWF container doesn't have lcov or nasm
      sudo yum install -y epel-release
      sudo yum install -y lcov nasm
      # This seems to be sufficient to make OpenGL / GLX software rasterization work
      sudo yum install -y mesa-dri-drivers
      # OTIO build needs a git user
      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
      export PYTHONPATH=$PWD/build/lib:$PYTHONPATH
      cmake .. -DCMAKE_BUILD_TYPE=Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_GCOV=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE -DDJV_BUILD_BIN=FALSE -DDJV_BUILD_DOC=FALSE -DDJV_BUILD_EXAMPLES=FALSE -DDJV_BUILD_EXPERIMENTS=FALSE
      # ASWF ci-base image already contains the SonarCloud tools in /usr/bin
      build-wrapper-linux-x86-64 --out-dir ../bw-output cmake --build . -j 4
      # Need to request 24bit visual to get OpenGL
      xvfb-run --server-args "-screen 0 640x480x24" cmake --build . --target test
      cat Testing/Temporary/LastTest.log
      sh ../etc/Util/gcov.sh ..
      #- cppcheck --enable=all --xml-version=2 -I${PWD}/lib -UDJV_ASSERT -UDJV_ENDIAN_MSB -UDJV_MMAP -UDJV_OPENGL_ES2 -UDJV_PLATFORM_WINDOWS -UGLM_PRECISION_LOWP_FLOAT -UGLM_PRECISION_LOWP_INT -UGLM_PRECISION_MEDIUMP_FLOAT -UGLM_PRECISION_MEDIUMP_INT -UDJV_OPENGL_PBO -Umax -Umin lib bin examples 2> report.xml
      cd ..

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      mkdir build
      cd build
      cmake .. -DCMAKE_BUILD_TYPE=Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_BUILD_TINY=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE -DDJV_BUILD_BIN=FALSE -DDJV_BUILD_DOC=FALSE -DDJV_BUILD_EXAMPLES=FALSE -DDJV_BUILD_EXPERIMENTS=FALSE
      cmake --build . -j 4

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      mkdir build
      cd build
      cmake .. -DCMAKE_BUILD_TYPE=Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_BUILD_TINY=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE -DDJV_BUILD_BIN=FALSE -DDJV_BUILD_DOC=FALSE -DDJV_BUILD_EXAMPLES=FALSE -DDJV_BUILD_EXPERIMENTS=FALSE
      cmake --build . -j 4
