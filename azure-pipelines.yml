trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-18.04'
  container:
    image: aswftesting/ci-base:2020.1
  steps:
  - script: |
      mkdir build
      cd build
      # ASWF container doesn't have lcov or nasm
      sudo yum install -y epel-release
      sudo yum install -y lcov nasm
      # This seems to be sufficient to make OpenGL / GLX software rasterization work
      sudo yum install -y mesa-dri-drivers
      # OTIO build needs a git user
      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
      export PATH=$PATH:$PWD/DJV-install-Debug/bin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/DJV-install-Debug/lib
      export PYTHONPATH=$PWD/DJV-install-Debug/lib:$PYTHONPATH
      echo "Building third party dependencies..."
      mkdir DJV-third-party-Debug
      cd DJV-third-party-Debug
      cmake ../../third-party -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE
      cmake --build .
      cmake --build . --target install
      cd ..
      echo "Building DJV..."
      mkdir DJV-Debug
      cd DJV-Debug
      cmake ../.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DCMAKE_PREFIX_PATH=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_BUILD_TINY=TRUE -DDJV_GCOV=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE
      # ASWF ci-base image already contains the SonarCloud tools in /usr/bin
      build-wrapper-linux-x86-64 --out-dir ../bw-output cmake --build . -j 4
      # Need to request 24bit visual to get OpenGL
      xvfb-run --server-args "-screen 0 640x480x24" cmake --build . --target test
      cat Testing/Temporary/LastTest.log
      sh ../../etc/Util/gcov.sh ../..
      #- cppcheck --enable=all --xml-version=2 -I${PWD}/lib -UDJV_ASSERT -UDJV_ENDIAN_MSB -UDJV_MMAP -UDJV_OPENGL_ES2 -UDJV_PLATFORM_WINDOWS -UGLM_PRECISION_LOWP_FLOAT -UGLM_PRECISION_LOWP_INT -UGLM_PRECISION_MEDIUMP_FLOAT -UGLM_PRECISION_MEDIUMP_INT -UDJV_OPENGL_PBO -Umax -Umin lib bin examples 2> report.xml
      cd ../..

- job: Linux_Packaging
  pool:
    vmImage: 'ubuntu-latest'
  failOnStderr: true
  steps:
  - script: |
      mkdir build
      cd build
      # OTIO build needs a git user
      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
      export PATH=$PATH:$PWD/DJV-install-Release/bin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/DJV-install-Release/lib
      export PYTHONPATH=$PWD/DJV-install-Release/lib:$PYTHONPATH
      echo "Building third party dependencies..."
      mkdir DJV-third-party-Release
      cd DJV-third-party-Release
      cmake ../../third-party -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../DJV-install-Release -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_PYTHON=FALSE
      cmake --build .
      cmake --build . --target install
      cd ..
      echo "Building DJV..."
      mkdir DJV-Release
      cd DJV-Release
      cmake ../.. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../DJV-install-Release -DCMAKE_PREFIX_PATH=../DJV-install-Release -DDJV_PYTHON=FALSE
      cmake --build . -j 4
      echo "Packaging DJV..."
      sudo apt-get install rpm-build
      cmake ../.. -DCPACK_GENERATOR=RPM -DCPACK_PACKAGING_INSTALL_PREFIX=/usr/local/DJV2 -DDJV_THIRD_PARTY=TRUE
      cmake --build . -j 4
      cmake --build . --target package
      cmake ../.. -DCPACK_GENERATOR=DEB -DCPACK_PACKAGING_INSTALL_PREFIX=/usr/local/DJV2 -DDJV_THIRD_PARTY=TRUE
      cmake --build . -j 4
      cmake --build . --target package
      cmake ../.. -DCPACK_GENERATOR=TGZ  -DCPACK_PACKAGING_INSTALL_PREFIX= -DDJV_THIRD_PARTY=TRUE
      cmake --build . -j 4
      cmake --build . --target package
      cd ../..

- job: Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      mkdir build
      cd build
      set PATH=%PATH%;%CD%\DJV-install-Debug\bin
      set PYTHONPATH=%CD%\DJV-install-Debug\lib;%PYTHONPATH%
      echo "Building third party dependencies..."
      mkdir DJV-third-party-Debug
      cd DJV-third-party-Debug
      cmake ..\..\third-party -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE
      cmake --build . -j 4
      cmake --build . --target install
      cd ..
      echo "Building DJV..."
      mkdir DJV-Debug
      cd DJV-Debug
      cmake ..\.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DCMAKE_PREFIX_PATH=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_BUILD_TINY=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE
      cmake --build . -j 4
      # Fails with:
      # MSBUILD : error MSB1009: Project file does not exist.
      #cmake --build . --target test
      #type Testing/Temporary/LastTest.log
      cd ..\..

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      mkdir build
      cd build
      export PATH=$PATH:$PWD/DJV-install-Debug/bin
      export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$PWD/DJV-install-Debug/lib
      export PYTHONPATH=$PWD/DJV-install-Debug/lib:$PYTHONPATH
      echo "Building third party dependencies..."
      mkdir DJV-third-party-Debug
      cd DJV-third-party-Debug
      cmake ../../third-party -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE -DCMAKE_FIND_FRAMEWORK="LAST"
      cmake --build . -j 4
      cmake --build . --target install
      cd ..
      echo "Building DJV..."
      mkdir DJV-Debug
      cd DJV-Debug
      cmake ../.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../DJV-install-Debug -DCMAKE_PREFIX_PATH=../DJV-install-Debug -DDJV_THIRD_PARTY_OPTIONAL=FALSE -DDJV_BUILD_TINY=TRUE -DDJV_PYTHON=FALSE -DDJV_OPENGL_ES2=TRUE -DCMAKE_FIND_FRAMEWORK="LAST"
      cmake --build . -j 4
      # Fails with:
      # Unable to create basic Accelerated OpenGL renderer.
      # Core Image is now using the software OpenGL renderer. This will be slow.
      # ERROR: Cannot create GLFW window.
      #cmake --build . --target test
      #cat Testing/Temporary/LastTest.log
      cd ../..
