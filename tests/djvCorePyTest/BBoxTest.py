import djvCorePy as d

import unittest

class BBoxTest(unittest.TestCase):

    def test_BBox2i(self):
        bb = d.BBox2i(d.ivec2(1, 2))
        self.assertEqual(bb.min, d.ivec2(1, 2))
        self.assertEqual(bb.max, d.ivec2(1, 2))
        bb = d.BBox2i(d.ivec2(1, 2), d.ivec2(3, 4))
        self.assertEqual(bb.min, d.ivec2(1, 2))
        self.assertEqual(bb.max, d.ivec2(3, 4))
        bb = d.BBox2i(1, 2, 3, 4)
        self.assertEqual(bb.min, d.ivec2(1, 2))
        self.assertEqual(bb.max, d.ivec2(3, 5))
        self.assertTrue(bb.isValid())
        bb.min = d.ivec2(3, 4)
        bb.max = d.ivec2(1, 2)
        self.assertEqual(bb, d.BBox2i(d.ivec2(3, 4), d.ivec2(1, 2)))
        self.assertFalse(bb.isValid())
        bb = d.BBox2i(1, 2, 3, 4)
        self.assertEqual(bb.x(), 1)
        self.assertEqual(bb.y(), 2)
        self.assertEqual(bb.w(), 3)
        self.assertEqual(bb.h(), 4)
        self.assertEqual(bb.getSize().x, 3)
        self.assertEqual(bb.getSize().y, 4)
        self.assertEqual(bb.getCenter().x, 2)
        self.assertEqual(bb.getCenter().y, 3)
        self.assertEqual(bb.getArea(), 12)
        print("Aspect =", bb.getAspect())
        bb.zero()
        self.assertEqual(bb, d.BBox2i(d.ivec2(0, 0), d.ivec2(0, 0)))
        self.assertTrue(d.BBox2i(1, 2, 3, 4).intersects(d.BBox2i(2, 3, 3, 4)))
        self.assertFalse(d.BBox2i(1, 2, 3, 4).intersects(d.BBox2i(5, 6, 3, 4)))

    def test_BBox2f(self):
        bb = d.BBox2f(d.vec2(1.0, 2.0))
        self.assertEqual(bb.min, d.vec2(1.0, 2.0))
        self.assertEqual(bb.max, d.vec2(1.0, 2.0))
        bb = d.BBox2f(d.vec2(1.0, 2.0), d.vec2(3.0, 4.0))
        self.assertEqual(bb.min, d.vec2(1.0, 2.0))
        self.assertEqual(bb.max, d.vec2(3.0, 4.0))
        bb = d.BBox2f(1.0, 2.0, 3.0, 4.0)
        self.assertEqual(bb.min, d.vec2(1.0, 2.0))
        self.assertEqual(bb.max, d.vec2(4.0, 6.0))
        self.assertTrue(bb.isValid())
        bb.min = d.vec2(3.0, 4.0)
        bb.max = d.vec2(1.0, 2.0)
        self.assertEqual(bb, d.BBox2f(d.vec2(3.0, 4.0), d.vec2(1.0, 2.0)))
        self.assertFalse(bb.isValid())
        bb = d.BBox2f(1.0, 2.0, 3.0, 4.0)
        self.assertEqual(bb.x(), 1.0)
        self.assertEqual(bb.y(), 2.0)
        self.assertEqual(bb.w(), 3.0)
        self.assertEqual(bb.h(), 4.0)
        self.assertEqual(bb.getSize().x, 3.0)
        self.assertEqual(bb.getSize().y, 4.0)
        self.assertEqual(bb.getCenter().x, 2.5)
        self.assertEqual(bb.getCenter().y, 4.0)
        self.assertEqual(bb.getArea(), 12.0)
        print("Aspect =", bb.getAspect())
        bb.zero()
        self.assertEqual(bb, d.BBox2f(0.0, 0.0, 0.0, 0.0))
        self.assertTrue(d.BBox2f(1.0, 2.0, 3.0, 4.0).intersects(d.BBox2f(2.0, 3.0, 3.0, 4.0)))
        self.assertFalse(d.BBox2f(1.0, 2.0, 3.0, 4.0).intersects(d.BBox2f(5.0, 6.0, 3.0, 4.0)))
    
if __name__ == '__main__':
    unittest.main()
